package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanningAllPropertiesEquals(Planning expected, Planning actual) {
        assertPlanningAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanningAllUpdatablePropertiesEquals(Planning expected, Planning actual) {
        assertPlanningUpdatableFieldsEquals(expected, actual);
        assertPlanningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanningAutoGeneratedPropertiesEquals(Planning expected, Planning actual) {
        assertThat(expected)
            .as("Verify Planning auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanningUpdatableFieldsEquals(Planning expected, Planning actual) {
        assertThat(expected)
            .as("Verify Planning relevant properties")
            .satisfies(e -> assertThat(e.getOrderCreationDate()).as("check orderCreationDate").isEqualTo(actual.getOrderCreationDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanningUpdatableRelationshipsEquals(Planning expected, Planning actual) {
        assertThat(expected)
            .as("Verify Planning relationships")
            .satisfies(e -> assertThat(e.getQuantification()).as("check quantification").isEqualTo(actual.getQuantification()));
    }
}
