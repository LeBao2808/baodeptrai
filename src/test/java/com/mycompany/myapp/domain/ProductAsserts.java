package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getWeight()).as("check weight").isEqualTo(actual.getWeight()))
            .satisfies(e -> assertThat(e.getHeight()).as("check height").isEqualTo(actual.getHeight()))
            .satisfies(e -> assertThat(e.getWidth()).as("check width").isEqualTo(actual.getWidth()))
            .satisfies(e -> assertThat(e.getLength()).as("check length").isEqualTo(actual.getLength()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getColor()).as("check color").isEqualTo(actual.getColor()))
            .satisfies(e -> assertThat(e.getCbm()).as("check cbm").isEqualTo(actual.getCbm()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getConstruction()).as("check construction").isEqualTo(actual.getConstruction()))
            .satisfies(e -> assertThat(e.getMasterPackingQty()).as("check masterPackingQty").isEqualTo(actual.getMasterPackingQty()))
            .satisfies(e -> assertThat(e.getMasterNestCode()).as("check masterNestCode").isEqualTo(actual.getMasterNestCode()))
            .satisfies(e -> assertThat(e.getInnerQty()).as("check innerQty").isEqualTo(actual.getInnerQty()))
            .satisfies(e -> assertThat(e.getPackSize()).as("check packSize").isEqualTo(actual.getPackSize()))
            .satisfies(e -> assertThat(e.getNestCode()).as("check nestCode").isEqualTo(actual.getNestCode()))
            .satisfies(e -> assertThat(e.getCountryOfOrigin()).as("check countryOfOrigin").isEqualTo(actual.getCountryOfOrigin()))
            .satisfies(e -> assertThat(e.getVendorName()).as("check vendorName").isEqualTo(actual.getVendorName()))
            .satisfies(e -> assertThat(e.getNumberOfSet()).as("check numberOfSet").isEqualTo(actual.getNumberOfSet()))
            .satisfies(e -> assertThat(e.getPriceFOB()).as("check priceFOB").isEqualTo(actual.getPriceFOB()))
            .satisfies(e -> assertThat(e.getQty40HC()).as("check qty40HC").isEqualTo(actual.getQty40HC()))
            .satisfies(e -> assertThat(e.getd57Qty()).as("check d57Qty").isEqualTo(actual.getd57Qty()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getLabels()).as("check labels").isEqualTo(actual.getLabels()))
            .satisfies(e -> assertThat(e.getPlanningNotes()).as("check planningNotes").isEqualTo(actual.getPlanningNotes()))
            .satisfies(e -> assertThat(e.getFactTag()).as("check factTag").isEqualTo(actual.getFactTag()))
            .satisfies(e -> assertThat(e.getPackagingLength()).as("check packagingLength").isEqualTo(actual.getPackagingLength()))
            .satisfies(e -> assertThat(e.getPackagingHeight()).as("check packagingHeight").isEqualTo(actual.getPackagingHeight()))
            .satisfies(e -> assertThat(e.getPackagingWidth()).as("check packagingWidth").isEqualTo(actual.getPackagingWidth()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(e -> assertThat(e.getSetIdProduct()).as("check setIdProduct").isEqualTo(actual.getSetIdProduct()))
            .satisfies(e -> assertThat(e.getParentProduct()).as("check parentProduct").isEqualTo(actual.getParentProduct()))
            .satisfies(e -> assertThat(e.getMaterial()).as("check material").isEqualTo(actual.getMaterial()));
    }
}
