package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MaterialReceiptDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialReceiptDetailAllPropertiesEquals(MaterialReceiptDetail expected, MaterialReceiptDetail actual) {
        assertMaterialReceiptDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertMaterialReceiptDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialReceiptDetailAllUpdatablePropertiesEquals(
        MaterialReceiptDetail expected,
        MaterialReceiptDetail actual
    ) {
        assertMaterialReceiptDetailUpdatableFieldsEquals(expected, actual);
        assertMaterialReceiptDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialReceiptDetailAutoGeneratedPropertiesEquals(
        MaterialReceiptDetail expected,
        MaterialReceiptDetail actual
    ) {
        assertThat(expected)
            .as("Verify MaterialReceiptDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialReceiptDetailUpdatableFieldsEquals(MaterialReceiptDetail expected, MaterialReceiptDetail actual) {
        assertThat(expected)
            .as("Verify MaterialReceiptDetail relevant properties")
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(
                e ->
                    assertThat(e.getImportPrice())
                        .as("check importPrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getImportPrice())
            )
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialReceiptDetailUpdatableRelationshipsEquals(
        MaterialReceiptDetail expected,
        MaterialReceiptDetail actual
    ) {
        assertThat(expected)
            .as("Verify MaterialReceiptDetail relationships")
            .satisfies(e -> assertThat(e.getMaterial()).as("check material").isEqualTo(actual.getMaterial()))
            .satisfies(e -> assertThat(e.getReceipt()).as("check receipt").isEqualTo(actual.getReceipt()));
    }
}
