package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MaterialInventoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialInventoryAllPropertiesEquals(MaterialInventory expected, MaterialInventory actual) {
        assertMaterialInventoryAutoGeneratedPropertiesEquals(expected, actual);
        assertMaterialInventoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialInventoryAllUpdatablePropertiesEquals(MaterialInventory expected, MaterialInventory actual) {
        assertMaterialInventoryUpdatableFieldsEquals(expected, actual);
        assertMaterialInventoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialInventoryAutoGeneratedPropertiesEquals(MaterialInventory expected, MaterialInventory actual) {
        assertThat(expected)
            .as("Verify MaterialInventory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialInventoryUpdatableFieldsEquals(MaterialInventory expected, MaterialInventory actual) {
        assertThat(expected)
            .as("Verify MaterialInventory relevant properties")
            .satisfies(e -> assertThat(e.getQuantityOnHand()).as("check quantityOnHand").isEqualTo(actual.getQuantityOnHand()))
            .satisfies(e -> assertThat(e.getInventoryMonth()).as("check inventoryMonth").isEqualTo(actual.getInventoryMonth()))
            .satisfies(e -> assertThat(e.getInventoryYear()).as("check inventoryYear").isEqualTo(actual.getInventoryYear()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMaterialInventoryUpdatableRelationshipsEquals(MaterialInventory expected, MaterialInventory actual) {
        assertThat(expected)
            .as("Verify MaterialInventory relationships")
            .satisfies(e -> assertThat(e.getMaterial()).as("check material").isEqualTo(actual.getMaterial()));
    }
}
